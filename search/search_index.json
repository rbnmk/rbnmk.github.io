{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"home","text":"<p>Welcome to this blog, where I share my ideas, designs and solutions to problems that you might run into. Hopefully to help you out. If you want to reach out or get in touch, feel free to do so via social media. I will try to respond as soon as I can.</p>"},{"location":"#azure-blogs","title":"Azure blogs","text":"<p>If you want to take a look at my Azure blogs you can find them here.</p>"},{"location":"#home-automation","title":"Home Automation","text":"<p>If you want to take a look at my home automation blogs you can find them here.</p>"},{"location":"about/","title":"About Me","text":"<p>Welcome, you've reached the about page. As you probably already know I am a Azure cloud consultant working on a lot of automation on Azure. I am always looking to automate certain tasks or processes to help myself or my co-workers, hopefully to inspire all who like to do the same. In 2025 I decided to merge my work and home automation blog into one blog, so you can find all my content here.</p> <p>This blog is mainly for sharing my own ideas, design and/or solutions to problems that you might run into, hopefully to help you out!</p> <p>If you want to reach out or want to get in touch, feel free to do so via social media. I will try to respond as soon as I can.</p> <p>Yours truly,</p> <p>Robin</p>"},{"location":"about/#social-media","title":"Social Media","text":"<ul> <li> LinkedIn</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2020/03/27/azure-update-management-you-have-requested-to-create-an-update-configuration-on-a-machine-that-is-not-registered-for-update-management/","title":"Azure Update Management: You have requested to create an update configuration on a machine that is not registered for Update Management","text":"<p>We have several customers running with our Update Management solution via Azure Automation. We schedule the deployments via Powershell and Azure DevOps. I have ran into several issues after migrating VM\u2019s to Azure or moving VM\u2019s within Azure.</p> <p>Somehow the System Hybrid Worker gets corrupted and does not work anymore, so update deployments will fail with the following warning:</p> <p>-image was lost in migration-</p> <p>To fix this I creaed a script. After running the script you can re-create the schedule in Azure Update Management.</p> <p>Some things to keep in mind before running the script:</p> <ul> <li>You need to be Administrator on the VM that you are trying to run the script on.</li> <li>If you are using SCOM for monitoring, running the script could cause an hiccup because the HealthService service will be restarted.</li> <li>The script removes the System Hybrid Worker information from the registry and removes cache files from the C:\\Program\u00a0Files\\Microsoft\u00a0Monitoring\u00a0Agent\\Agent\\Health\u00a0Service\u00a0State folder.</li> </ul> <p>If you have any questions let me know in the comments!</p> <p>The most recent script can be found in my Github repo.</p>","tags":["automation","azure","management","update"]},{"location":"blog/2022/11/15/azure-automation-runbook-could-not-convert-string-to-datetimeoffset/","title":"Azure Automation Runbook: Could not convert string to DateTimeOffset","text":"<p>I recently started getting issues with different customers in which we use Azure Automation for Update Management. We use the pre- and post runbook functionality for quite some time already, but recently we started getting these errors..</p> <p>on multiple lines in the runbook output:</p> <p><code>\"Could not convert string to DateTimeOffset: 1619773997. Path 'expires_on', line 1, position 2937.\"</code></p> <p>While researching this issue I figured out it had something to do with Az Powershell and depending on a older or newer module within one of the submodules. (which can be found here) </p> <p>However I updated the Az Module to the latest available in de Azure Automation account when this came available, so why is this happening? I remembered that back in the days Azure Automation did not have AzPowershell but AzurePowerShell installed, so we installed the required modules for our scripts manually. After the Az Module was supported by the platform for newer accounts (and updating older) we started using this, but we did not know that modules that were imported before that are not updating... I found out this is actually also written in the Azure Automation docs page: </p> <p>Quote from Microsoft Docs (MSLearn):</p> <p>The recommended way for this scenario is to first delete the existing Az modules and then perform the update operations to get the latest Az module imported in the Automation account. Such module types, not imported by default, are referred to as Custom. Custom modules will always take preference over default modules For example: If you already have the Az.Aks module imported with version 2.3.0 which is provided by Az module 6.3.0 and you try to update the Az module to the latest 6.4.0 version. The update operation will import all the Az modules from 6.4.0 package, except Az.Aks. To have the latest version of Az.Aks, first delete the existing module and then perform the update operation, or you can also update this module separately as described in Import Az modules to import a different version of a specific module.</p> <p>Now let's fix this:</p> <p>If you look at the modules in your Automation account via the portal you can filter on the module type: 'Custom', if you see any 'Az.' modules there that could be outdated. </p> <p></p> <p>As you can see mine were not updated since february. In order to fix this you can either remove them one by one, or if you like PowerShell use this one-liner:</p> <p>Please only use this script if you know what you are doing!</p> <p>Last but not least just use the Update Az Modules button in the portal to restore all the removed modules to a working state and probably a succeeding runbook again!</p> <p>Hope this helps out as I couldn't find anything about this on the world wide web.</p>","tags":["AzureAutomation","AzPowerShell","PowerShell"]},{"location":"blog/2022/01/01/disable-health-probe-on-azure-front-door-origin-groups-using-bicep/","title":"Disable Health Probe on Azure Front Door Origin Groups using Bicep","text":"<p>If you want to know how... read on!</p>","tags":["FrontDoor","CDN","FrontDoorStandard","FrontDoorPremium","Bicep","InfrastructureAsCode"]},{"location":"blog/2022/01/01/disable-health-probe-on-azure-front-door-origin-groups-using-bicep/#introduction","title":"Introduction","text":"<p>For origins with a single backend it is recommended by the Microsoft Learn documentation to disable the health probe to prevent the Front Door from consuming resources on your backend. Because I had troubles disabling the Health Probe using Bicep, because of lacking documentation on how to disable it, specifically for the Front Door Standard / Premium, which seems to belong to the Microsoft.Cdn resource provider. I wanted to share with you how you can disable the Health Probe, as it is quite easy, but if there is no documentation about this then it may take some time to figure it out. Click here to find out how to disable it or just continue reading.</p>","tags":["FrontDoor","CDN","FrontDoorStandard","FrontDoorPremium","Bicep","InfrastructureAsCode"]},{"location":"blog/2022/01/01/disable-health-probe-on-azure-front-door-origin-groups-using-bicep/#disable-the-health-probe-according-to-the-rest-arm-api-documentation-and-reference","title":"Disable the health probe according to the (rest, arm) api documentation and reference","text":"<p>If you start off with an example template from the documentation you will most likely have health probe enabled, because if you have multiple backends Front Door can determine which backends are healthy, which is nice to have of course.</p> <p>In the portal it is simply ticking a box as seen in the screenshot below:</p> <p></p> <p>According to the documentation it should be updated in the origin itself instead of the group:</p> <ul> <li>Bicep reference states it should be configured in the AFDOriginProperties, using EnabledState set to false. See here</li> <li>Front Door rest api tells me exactly the same but that obviously didn't work for me either: See here</li> </ul>","tags":["FrontDoor","CDN","FrontDoorStandard","FrontDoorPremium","Bicep","InfrastructureAsCode"]},{"location":"blog/2022/01/01/disable-health-probe-on-azure-front-door-origin-groups-using-bicep/#disable-the-health-probe-in-bicep","title":"Disable the health probe in Bicep","text":"<p>In order to disable the health probe in Bicep, it turned out it is as simple as omitting the healthProbeSettings object in the Origin Group, so not in the Origin level! See below:</p>","tags":["FrontDoor","CDN","FrontDoorStandard","FrontDoorPremium","Bicep","InfrastructureAsCode"]},{"location":"blog/2022/01/01/disable-health-probe-on-azure-front-door-origin-groups-using-bicep/#health-probing-enabled","title":"Health probing enabled:","text":"<pre><code>resource originGroup 'Microsoft.Cdn/profiles/origingroups@2021-06-01' = {\n  parent: frontDoorProfile\n  name: 'originGroup'\n  properties: {\n    loadBalancingSettings: {\n      sampleSize: 4\n      successfulSamplesRequired: 3\n      additionalLatencyInMilliseconds: 0\n    }\n    healthProbeSettings: {\n      probePath: '/'\n      probeRequestType: 'HEAD'\n      probeProtocol: 'Https'\n      probeIntervalInSeconds: 100\n    }\n    sessionAffinityState: 'Disabled'\n  }\n}\n</code></pre>","tags":["FrontDoor","CDN","FrontDoorStandard","FrontDoorPremium","Bicep","InfrastructureAsCode"]},{"location":"blog/2022/01/01/disable-health-probe-on-azure-front-door-origin-groups-using-bicep/#health-probing-disabled","title":"Health probing disabled","text":"<pre><code>resource originGroup 'Microsoft.Cdn/profiles/origingroups@2021-06-01' = {\n  parent: frontDoorProfile\n  name: 'originGroup'\n  properties: {\n    loadBalancingSettings: {\n      sampleSize: 4\n      successfulSamplesRequired: 3\n      additionalLatencyInMilliseconds: 0\n    }\n    sessionAffinityState: 'Disabled'\n  }\n}\n</code></pre> <p>After deployment the setting on the Origin Group should look like this:</p> <p></p> <p>I hope this helped you disabling the Health Probes from Bicep, because it took me some time to figure this out, and I couldn't find anything about this via my common used search engine \ud83d\ude09. I will try to make a comment about this on the mentioned documentation via the feedback forms.</p> <p>If you have any questions or remarks about this blog please reach out to me via one of my social media channels or the comments below.</p>","tags":["FrontDoor","CDN","FrontDoorStandard","FrontDoorPremium","Bicep","InfrastructureAsCode"]},{"location":"blog/2023/07/12/failed-to-save-kubernetes-service---addonprofilesingressapplicationgatewayconfigapplicationgatewayid-is-invalid/","title":"Failed to save Kubernetes service - addonProfiles.ingressApplicationGateway.config.applicationGatewayId is invalid","text":"<p>I ran into an issue when deploying Azure Kubernetes services using ARM Templates. We previously set the ingress-agw addon to configure the ingress using an application gateway. We recently moved to the Azure Application Gateway Ingress Controller using Helm and simply set the addon configuration to 'null' but that creates a conflict when making other changes such as changing the SKU (Pricing Tier) of the cluster.</p> <p>We noticed that our clusters were set to the Free SKU but we are actually deploying with the Standard SKU. When we tried to change the SKU in the portal we got the following error:</p> <p></p> <p>Error description in text:</p> <p>Failed to save Kubernetes service. Error: Property id '' at path 'properties.addonProfiles.ingressApplicationGateway.config.applicationGatewayId' is invalid. Expect fully qualified resource Id that start with '/subscriptions/{subscriptionId}' or '/providers/{resourceProviderNamespace}/'</p>","tags":["Azure","AzureKubernetes","AKS","ApplicationGatewayAKSAddon","ApplicationGateway"]},{"location":"blog/2023/07/12/failed-to-save-kubernetes-service---addonprofilesingressapplicationgatewayconfigapplicationgatewayid-is-invalid/#the-solution","title":"The solution","text":"<p>This Github issue actually pointed me in the right direction after I tried removing the addon from the ARM-template didnt fix it.</p> <p>For this solution I used Azure CLI (PowerShell) and the AKS-preview addon. Make sure you set your az cli context to the subscription where your AKS-cluster is created.</p> <p>Please check carefully if you can run this command against your environment before executing!</p>","tags":["Azure","AzureKubernetes","AKS","ApplicationGatewayAKSAddon","ApplicationGateway"]},{"location":"blog/2023/07/12/failed-to-save-kubernetes-service---addonprofilesingressapplicationgatewayconfigapplicationgatewayid-is-invalid/#optional-set-the-subscription-context","title":"(Optional) Set the subscription context","text":"<pre><code>$aksSubscriptionName = \"aksSubscription\"\naz account set --subscription $aksSubscriptionName\n</code></pre>","tags":["Azure","AzureKubernetes","AKS","ApplicationGatewayAKSAddon","ApplicationGateway"]},{"location":"blog/2023/07/12/failed-to-save-kubernetes-service---addonprofilesingressapplicationgatewayconfigapplicationgatewayid-is-invalid/#disable-the-add-on","title":"Disable the add-on","text":"<pre><code>$aksName = \"aks\"\n$aksRgName = \"aksrg\"\naz aks disable-addons --addon 'ingress-appgw' --resource-group $aksRgName -n $aksName\n</code></pre>","tags":["Azure","AzureKubernetes","AKS","ApplicationGatewayAKSAddon","ApplicationGateway"]},{"location":"blog/2023/07/12/failed-to-save-kubernetes-service---addonprofilesingressapplicationgatewayconfigapplicationgatewayid-is-invalid/#update-the-cluster-sku","title":"Update the cluster SKU","text":"<p>I still could not update the SKU using my ARM-template so I used Azure CLI to configure (update the sku) for my AKS-cluster.</p> <pre><code>$aksName = \"aks\"\n$aksRgName = \"aksrg\"\naz aks update --resource-group $aksRgName -n $aksName --tier 'Standard'\n</code></pre> <p>Now verify if the cluster is set to the Standard SKU:</p> <p></p> <p>I also checked if the SKU is set correctly after an ARM-template deployment. It was not reset to Free so I think it's all good now. I hope that Microsoft Azure will provide better error messages in the future for these kind of issues.</p> <p>That's it for today, hope it helped you out - would be happy to know if it helped you (or not)!</p>","tags":["Azure","AzureKubernetes","AKS","ApplicationGatewayAKSAddon","ApplicationGateway"]},{"location":"blog/2025/01/03/home-automation-blogs/","title":"Home Automation blogs","text":"<p>Sample blog...</p> <p>Continues here.. </p>"},{"location":"blog/2025/01/02/from-jekyll-to-mkdocs-in-2025/","title":"From Jekyll to MkDocs in 2025","text":"<p>Wish you all the best for the new year but I wanted to tell you...</p> <p>I switched from Jekyll to MkDocs because it is a simple tool to maintain and run. I always ran into gem issues with Jekyll when coming back to it. I also wanted to have a more static site and not have to worry about the dynamic content that Jekyll offers. I will be posting new content about Azure automation (Bicep, PowerShell etc.) soon!</p> <p>Hope to see you soon!</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/archive/2020/","title":"2020","text":""},{"location":"blog/category/home-automation/","title":"Home Automation","text":""},{"location":"blog/category/general/","title":"General","text":""},{"location":"blog/category/azure/","title":"Azure","text":""}]}